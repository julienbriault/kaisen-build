#!/usr/bin/env bash

set -e

DATE=$(date '+%Y-%m-%d_%H-%M-%S')
GREEN='\e[1;32m'
YELLOW='\e[0;33m'
RED='\e[1;31m'

export variant=$2
export version=$3

if [[ "$EUID" -ne 0 ]]; then
	echo -e $RED "Run this script as root or with the sudo command."
	exit 1
fi

log() {
	mkdir -p /var/log/kaisen-build
	exec > >(tee /var/log/kaisen-build/kaisen-build-$variant-$DATE.log) 2>&1
}

function explaination() {
	echo -e $GREEN "Kaisen Linux ISO build system

USAGE
	cd ~/kaisen-build (with no root user)
	sudo ./kaisen-build <action> <variant> <version>

EXPLAINATION
	action - help, build, clean
		help: display help
		build: build iso
		clean: delete generated files created by kaisen-build

	variant - MATE, XFCE, KDE, LXQT, SR, NETINST, CUSTOM
		the graphical interface to use (MATE, XFCE, KDE or LXQT)
		or use System Rescue version (Only technicians tools, with or not GUI, SR variant)
		or use network installer (no live, NETINST variant)

	version - select your version number

EXAMPLE
	sudo ./kaisen-build build CUSTOM 1.0
	or sudo ./kaisen-build build CUSTOM

DOCUMENTATION
	https://kaisenlinux.org/documentation/faq.html#how-to-build-custom-iso
"
}

function kaisen-build() {
if [ -z $variant ]; then
	echo -e $RED "Launch this script with a valid variant name."
	exit 1
fi

if [ ! -e variant/$variant ] && [ ! -d variant/$variant ]; then
	echo -e $RED "The variant $variant does not exist or does not a folder in variant folder."
	exit 1
fi

if [ -z $version ]; then
	echo -e $RED "Launch this script with a version number."
	exit 1
fi

while [[ $OPTION != "y" && $OPTION != "n" ]]; do
    read -rp "$(echo -e $GREEN "Would you like create a log file? [y/n]")" OPTION
	echo ""
done

if [[ $OPTION = "y" ]]; then
	log
	echo -e $GREEN "Log file created in /var/log/kaisen-build/kaisen-build-$variant-$DATE.log";tput init
	echo ""
else
	echo -e $YELLOW "No log file created.";tput init
	echo ""
fi

case $variant in
	KDE|LXQT|MATE|XFCE|SR)
		lb clean
		rm -rf cache config unpacked-initrd .build tmp images || true
		lb build
		mv live-image-amd64.hybrid.iso ../kaisenlinuxrolling$version-amd64-$variant.iso
		echo -e $YELLOW "ISO can be found in ../kaisenlinuxrolling$version-amd64-$variant.iso";tput init
		lb clean
		rm -rf cache config unpacked-initrd .build || true
		echo -e $GREEN "All files generated by kaisen-build has been deleted successfully."
	;;
esac

case $variant in
    CUSTOM)
		lb clean
		rm -rf cache config unpacked-initrd .build tmp images || true
		lb build
		mv live-image-amd64.hybrid.iso ../kaisenlinuxCUSTOM-amd64-$version.iso
		echo -e $YELLOW "ISO can be found in ../kaisenlinuxCUSTOM-amd64-$version.iso";tput init
		lb clean
		rm -rf cache config unpacked-initrd .build || true
		echo -e $GREEN "All files generated by kaisen-build has been deleted successfully."
	;;
esac

case $variant in
	NETINST)
		rm -rf cache config unpacked-initrd .build tmp images || true
		build-simple-cdd \
		--profiles kaisen \
		--auto-profiles kaisen \
		--verbose \
		--debug \
		--force-root \
		--conf variant/NETINST/simple-cdd.conf \
		--dist kaisen-rolling \
		--debian-mirror https://deb.kaisenlinux.org
		mv images/kaisen-Rolling-amd64-NETINST-1.iso ../kaisenlinuxrolling$version-amd64-$variant.iso
		echo -e $YELLOW "ISO can be found in ../kaisenlinuxrolling$version-amd64-$variant.iso"
		rm -rf tmp images || true
		echo -e $GREEN "All files generated by kaisen-build has been deleted successfully."
	;;
esac
}

function clean() {
	lb clean
	rm -rf cache config unpacked-initrd .build tmp images || true
	echo -e $GREEN "All files generated by kaisen-build has been deleted successfully."
}

case $1 in
		build)
			kaisen-build
	;;
		clean)
			clean
	;;
		help)
			explaination
	;;
		*)
			explaination
	;;
esac
